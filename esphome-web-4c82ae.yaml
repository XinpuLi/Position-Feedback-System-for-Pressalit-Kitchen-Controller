esphome:
  name: esphome-web-4c82ae
  friendly_name: ESPHome Counter_1
  includes:
    - tof_vl53l1x.h
  libraries:
    - "Wire"
    - "VL53L1x"

esp8266:
  board: esp01_1m

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: "/AjR0R0yDICMHu3dku8J1Vm4g3xky2lD8bani3nQy4c="

ota:
#TNCAP73D207  ,  6DFED3B2D3

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-4C82Ae"
    password: "49jxuWQUJj4I"

captive_portal:


globals:
  id: Set_Height_Value
  type: int
  initial_value: '70'

mqtt:
  broker: 192.168.2.87
  port: 1883
  username: !secret MQTT_usrname
  password: !secret MQTT_password

i2c:  
  id: i2c_bus
  scan: True
  frequency: 400kHz
  
  
  
sensor:
    - platform: custom
      lambda: |-
        auto my_sensor = new MyCustomSensor();
        App.register_component(my_sensor);
        return {my_sensor};
    
      sensors:
        name: "Distance"
        id: distance
        accuracy_decimals: 0
        unit_of_measurement: "cm" 
        on_raw_value: 
          then: 
            #- script.execute: control_logic
            - logger.log: 
                      format: "The set height : %.1f  :  The sensor : %.1f"
                      args: [ 'id(Set_Height_Value)' , 'id(distance).state']

            - if:
                condition:
                   switch.is_on: motor_forward
                then:
                  if:
                    condition:
                        lambda: |-
                            return int(id(distance).state) >= int( id(set_height).state);
                    then:
                      - switch.turn_off: motor_forward
                      - switch.turn_off: motor_reverse
            - if:
                condition:
                   switch.is_on: motor_reverse
                then:
                  if:
                    condition:
                        lambda: |-
                            return int(id(distance).state) <= int( id(set_height).state);
                    then:
                      - switch.turn_off: motor_forward
                      - switch.turn_off: motor_reverse
                

                

number:
  - platform: template
    step: 1
    max_value: 100.0
    min_value: 0.0
    name: "set Height"
    id: set_height
    optimistic: True
    
    on_value:
      then:
        - globals.set:
            id: Set_Height_Value
            value: int(id(set_height).state)
        - logger.log: 
                  format: "The set height : %.1f"
                  args: [ 'id(Set_Height_Value)' ]
        - if:
            condition:
              lambda: |-
                return int(id(distance).state) < int( id(set_height).state);
            then:
              - switch.turn_on: motor_forward
              - switch.turn_off: motor_reverse

        - if:
            condition:
              lambda: |-
                return int(id(distance).state) > int( id(set_height).state);
            then:
              - switch.turn_off: motor_forward
              - switch.turn_on: motor_reverse
        - if:
            condition:
              lambda: |-
                return int(id(distance).state) == int( id(set_height).state);
            then:
              - switch.turn_off: motor_forward
              - switch.turn_off: motor_reverse


        

switch:
  - platform: gpio
    pin: GPIO14  # Replace with the appropriate pin for motor forward control
    id: motor_forward
    inverted: yes
    

  - platform: gpio
    pin: GPIO12  # Replace with the appropriate pin for motor reverse control
    id: motor_reverse
    inverted: yes
        

  